This is an under development step and this is a temporary report.


Here starts the AESOP (Agents and Emergencies for Simulating Organizations in Python) implementation, with the capability of reading the schedule from a text file.

The test file is schedule.txt and its contents are read if we have "read_schedule" steps activated in the schedule of the model.

If the file is finished, further attempt to "read_schedule" have no effect.

Here two methods (eat, dance) are broadcasted to all the instances of the class Bug. 

---

Added the capability of reading more than one command per step.

---

Added the capability of reading from a xls file.
If schedule.xls exist it is copied to schedule.txt, without row comments.

---

Added the capability of broadcasting a method only to a share of the 
instances of a class; see in schedule.xls on in schedule.txt the use 
of 'Bug 0.5 dance'

---

now projects are separated in folders

---

existing projects are: basic school

---

Added the WorldState class, to interact with the bugs; at present we have a unique instance of the class, but the structucture is anyway built upon a list of any number of instances of the class

The value to be set is prefixed to the method

---

Changed Bug to Agent everywhere

---

Added more than one category of agent, each defined in a file (a file can contain a unique agent)

---

Introduced in Agent.py the inheritance from the lib turtle.py, as in version 2.6 or more of Python

Now agents are directly acting on the screen 

---

modified deeply the agent names, whisk are always the same, both in the declarative .txt file and in the schedule.xls (or schedule.txt, if using directly this one) script files 

---

to use the school project temporary adopt

Project name? schoolrandom number seed (1 to get it from the clock) 2 [or another value]How many 'bland' agents? 0X Size of the world? 100Y Size of the world? 100How many cycles? (0 = exit) [any value]

---

added:

reset at the beginning of each cycle, via external command sequence

a Pen tool to design graphics with turtles

in 'school' the step by step calculation of a synthetic variable (attention), reported graphically

---

added the possibility of creating operating sets, listed in agOperatingSets.txt, containing the IDs of agents also of different type; the agents of a set are asked to to something together

---

added macro instructions, as separate sheets in schedule.xls, to be invoked as

macro nameOfTheMacro

---

added the possibility of inserting empty lines in schedule.xls, to improve readability

---

improved graphics and created school1 application (previous school is now school0)

---

the part of agents in a set, effectively acting, can be now identified both as an individual probability - as a floating positive number - or as an absolute number - as an integer negative number (in case, the acting agent/s will be extracted randomly from the specified set)

---

added the capability of reordering a schedule not ordered upon time, with '#   x' rows in macros, with repeated action over time in a macro; see the example complicated_schedule.xls in shool1 folder; to use it, rename the file (preserving the existing one) to the default name: schedule.xls

---

graphics run now deleting and designing in the same step

---

agent of shool1 project adopts a weighted mean in evaluating the performances internally to each step

---

deleted the school0 project and renamed shool1 to school; if you need to access shool0 project, look at the 20110110 version

added conditional methods, i.e. shakeIf_verdePupil (colored in green in scheduleIf.xls)

changed in Pen.py the size of the label of the graphic

in school/oActions.py, maxY= defines the max value to be reported on the y axis; values are scaled in a consistent way

fixed an error in scheduling: sometimes the sequence of the events was slightly changed

scheduleApp.xls, to be renamed schedule.xls in case you want to use it, is an initial true scale application

---

further fix to the scheduling translation mechanism, with a more derailed sort definition

---

improved the pictures of the pupils and specified gender in school project

---

fixed an error in ModelSwarm.py, for the simple basic case

---

 